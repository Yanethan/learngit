1.	Git 安装
    Git官网https://git-for-windows.github.io/   国内安装镜像 http://gitb.org/
    git config --global user.name "Your Name"
    git config --global user.email email@example.com

2.	创建版本库
    mkdir <版本库名称> 创建版本库命令
    cd <版本库名称> 加载版本库命令
    pwd 显示当前版本库
    git init 变为当前可管理的仓库
    git status 命令用于查看状态结果
    git diff <文件名>命令用于查看具体修改内容
    git add<文件名>  git commit-m “修改名称”
    git log 用于显示从最近到最远的提交日志（输入git log --pretty=oneline）

3.	版本回退
    git reset --hard HEAD^ (用于返回到上一个版本)
    git reset –hard <commit_id> 用于回退到指定版本
    git reflog 命令用于记录每次命令
    小结:
        HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
	    穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
	    要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。
4.	工作区和暂存区
    工作区（例如：learngit就是一个工作区）
    版本库（learngit 下的隐藏目录.git为版本库 ）
    暂存区（Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。）
    第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；
    第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。
5.	管理修改、撤销修改
    git checkout --<file_name>用于把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
    一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
    一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
    git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区：
    小结:
        场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
        场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。	
        场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。

6.	删除文件
    rm <file_name>用于删除文件

7.	添加远程库
    第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：
    ssh-keygen –t rsa C “E-mail”
    你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。
    如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。
    第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：
    然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：

8.	从远程库克隆
    git clone <地址>  （地址例如：git@github.com:Yanethan/gitskills.git）
    ls 命令用于显示当前工作区文件

9.	创建与合并分支
    （1）.创建分支
        git checkout –b <New_branch_name> 命令用于创建一个新分支并切换到新建分支，相当于git branch < New_branch_name >    git checkout < New_branch_name >
        gti branch  命令会列出所有分支，当前分支前面会标一个*号
        git checkout< New_branch_name > 命令用于切换分支
    （2）.合并分支
        git merge <New_branch_name>命令用于合并指定分支到当前分支。合并后，再查看readme.txt的内容，就可以看到和dev分支的最新提交是完全一样的。其中Fast-forward表示合并为“快进模式”
    （3）.删除分支
        git branch –d <branch_name>
    小结
        查看分支：git branch
        创建分支：git branch <name>
        切换分支：git checkout <name>
        创建+切换分支：git checkout -b <name>
        合并某分支到当前分支：git merge <name>
        删除分支：git branch -d <name>
10.	解决冲突
    当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
    用git log --graph命令可以看到分支合并图。
11.	使用码云及GitHub
    （1）.添加公钥
    （2）使用命令 git remote add origin git@gitee.com:Yanethan/learngit.git 添加一个远程库，之后使用git push 及git pull 推送（若使用git remote add时出错，可用git remote –v 查看远程库信息，可用git remote rm origin 命令删除已有的库，再进行关联）
    （3）同时，一个本地库可以关联远程库（可先删除已有的GitHub远程库，再关联GitHub远程库git remote add github git@github:Yanethan/learngit.git 关联码云远程库 git remote add gitee git@gitee.com:Yanethan/learngit.git ，此时可用gir remote –v 命令查看已关联的远程库）
    （4）推送，git push github master推送到GitHub  / git push gitee master推送到码云
12.	自定义git
    （1）.使用git config –global 
    （2）.忽略特殊文件
    在Git工作区的根目录下创建一个特殊的.gitignore文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件。
    若某文件被忽略而又要强制提交，则 git add –f <file_name>
    若.gitignore写的有问题，则可通过命令git check-ignore –v <file_name>查看具体 .ignore 文件哪一行忽略了要提交的文件。
    重点：.ignore文件本身要放到版本库中，并且可以做版本管理
13.	配置别名
    git config --global alias. st status (以后可用st来表示status)
    git config --global alias.co checkout
    git config --global alias.ci commit
    git config --global alias.br branch等
    配置文件
    配置Git的时候，加上--global是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。
    配置文件放在每个仓库的Git配置文件都放在.git/config文件中：.git/config 
    别名就在[alias]后面，要删除别名，直接把对应的行删掉即可。

    而当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中：cat .gitconfig
    配置别名也可以直接修改这个文件，如果改错了，可以删掉文件重新通过命令配置。
